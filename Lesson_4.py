"""
Задание 1.  Реализовать скрипт, в котором должна быть
предусмотрена функция расчёта заработной платы сотрудника.
Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
Во время выполнения расчёта для конкретных значений
необходимо запускать скрипт с параметрами.

"""
from sys import argv

script, hours, money_per_hour, bonus = argv


def calculate_salary(hours_, money_per_hour_, bonus_):
    try:
        result = (int(hours_) * float(money_per_hour_)) + float(bonus_)
    except ValueError:
        return
    return result


print(f"{calculate_salary(hours, money_per_hour, bonus)}")

"""
Задание 2.  Представлен список чисел.
Необходимо вывести элементы исходного списка, 
значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
Для его формирования используйте генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].

"""

list_original = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
list_result = [k for i, j in enumerate(list_original) for k in list_original[i + 1:i + 2] if k > j]
print(list_result)

"""
Задание 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
Решите задание в одну строку.
Подсказка: используйте функцию range() и генератор.

"""

print([i for i in range(20, 241) if i % 20 == 0 or i % 21 == 0])

"""
Задание 4. Представлен список чисел. Определите элементы списка, не имеющие повторений.
Сформируйте итоговый массив чисел, соответствующих требованию.
Элементы выведите в порядке их следования в исходном списке.
Для выполнения задания обязательно используйте генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]

"""


def my_counter(lst: list) -> dict:
    result = {}
    for key, val in enumerate(lst):
        if result.get(val) is None:
            result[val] = 1
        else:
            result[val] += 1
    return result


list_src = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
counter = my_counter(list_src)
list_res = [x for x, n in counter.items() if n == 1]
print(list_res)

"""
Задание 5. Реализовать формирование списка, 
используя функцию range() и возможности генератора. 
В список должны войти чётные числа от 100 до 1000 (включая границы).
Нужно получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().

"""

from functools import reduce

list_1 = [a for a in range(100, 1001)]

print(list_1)

results = reduce(lambda num, num2: num * num2, list_1)
print(f"Резултат: {results}")

"""
Задание 6.Реализовать два небольших скрипта:
итератор, генерирующий целые числа, начиная с указанного;
итератор, повторяющий элементы некоторого списка, определённого заранее.
Подсказка: используйте функцию count() и cycle() модуля itertools. 
Обратите внимание, что создаваемый цикл не должен быть бесконечным. 
Предусмотрите условие его завершения.
#### Например, в первом задании выводим целые числа, начиная с 3.
При достижении числа 10 — завершаем цикл.
Вторым пунктом необходимо предусмотреть условие,
при котором повторение элементов списка прекратится.

"""

from itertools import count, cycle

print("Итератор, генерирующий целые числа, начиная с указанного:")
for item in count(3):
    if item > 10:
        break
    else:
        print(item)

print("Итератор, повторяющий элементы некоторого списка, определенного заранее:")
i = 0
for value in cycle([1, 2, 3]):
    if i > 10:
        break
    print(value)
    i += 1

""" Задание 7. Реализовать генератор с помощью функции с ключевым словом yield, 
создающим очередное значение. При вызове функции должен создаваться объект-генератор.
Функция вызывается следующим образом: for el in fact(n). 
Она отвечает за получение факториала числа. 
В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. 
Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

"""


def fact(n):
    result = 1
    for i in range(1, n + 1):
        result *= i
        yield result


for el in fact(4):
    print(el)
